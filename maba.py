"""
Mass Backtester
https://github.com/rulibar/mass-backtester

Gets data files from data_dir with the following format:
btc_eth_120m_200101-200301.txt
[
    1573502400000,      // Open time
    '0.02128900',       // Open
    '0.02130100',       // High
    '0.02126800',       // Low
    '0.02130000',       // Close
    '3221.45600000',    // Volume
    1573509599999,      // Close time
    '68.56577333',      // Quote asset volume
    5295,               // Number of trades
    '1564.35900000',    // Taker buy base asset volume
    '33.29836240',      // Taker buy quote asset volume
    '0'                 // Ignore
]
Generated by get_data.py.
The first entry in the data is the oldest.

"""

import os
import time
import logging

# user vars
n_early_candles = 600
data_dir = "data/"

# set up logger
def set_log_file(ts, dsname):
    # Set up the log folders
    gmt = time.gmtime(ts / 1000)
    asct = time.asctime(gmt)
    yy = str(gmt.tm_year)[2:]; mm = str(gmt.tm_mon); dd = str(gmt.tm_mday)
    if len(mm) == 1: mm = "0" + mm
    if len(dd) == 1: dd = "0" + dd
    path = "./logs/"
    if not os.path.isdir(path): os.mkdir(path)
    path += "{}/".format(dsname)
    if not os.path.isdir(path): os.mkdir(path)
    path += "{}/".format(yy + mm)
    if not os.path.isdir(path): os.mkdir(path)
    # Set the log destination and format
    fileh = logging.FileHandler("./logs/{}/{}/{}.log".format(dsname, yy + mm, yy + mm + dd), "a")
    formatter = logging.Formatter("%(levelname)s {} - %(message)s".format(asct))
    fileh.setFormatter(formatter)
    logger.handlers = [fileh]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

# set up backtester
def fix_dec(float_in):
    float_out = "{:.8f}".format(float_in)
    while float_out[-1] == "0": float_out = float_out[:-1]
    if float_out[-1] == ".": float_out = float_out[:-1]
    return float_out

def shrink_list(list_in, size) -> list:
    if len(list_in) > size: return list_in[-size:]
    return list_in

class Portfolio:
    def __init__(self, candle, positions, funds):
        self.ts = candle['ts_end']
        self.asset = positions['asset'][1]
        self.base = positions['base'][1]
        self.price = candle['close']
        self.positionValue = self.price * self.asset
        self.size = self.base + self.positionValue
        self.funds = funds
        if funds > self.size or funds == 0: self.funds = float(self.size)
        self.sizeT = float(self.funds)
        self.rin = self.price * self.asset / self.size
        self.rinT = self.price * self.asset / self.sizeT

class Backtest:
    def __init__(self, dspath):
        # Expected dspath format: './data/btc_xrp_120m_200101-200301.txt'
        self.dspath = dspath
        self.dsname = dspath.split('/')
        self.dsname = self.dsname[-1][:-4]
        self.dsname_data = self.dsname.split('_')
        with open(self.dspath) as data: self.data = data.read()
        self.data = self.data.split('\n')[:-1]
        self.data = [eval(dat) for dat in self.data]

        self.next_log = 0
        self.ticks = 0; self.days = 0; self.trades = 0
        self.exchange = "binance"
        self.base = self.dsname_data[0].upper()
        self.asset = self.dsname_data[1].upper()
        self.pair = self.asset + self.base
        self.interval = int(self.dsname_data[2][:-1])
        set_log_file(self.data[n_early_candles][0], self.dsname)
        logger.info("New trader instance started on {} {}m.".format(self.pair, self.interval))
        #self.get_params()

# main code
datasets = os.listdir(data_dir)

# cycle through the data
for dataset in datasets:
    """
    - Import the data
    - Set up the logger
    - Initialize the Backtest instance
    - Run the backtest
    - Save the relevant data from the Backtest instance
    """
    data_path = "./" + data_dir + dataset
    backtest = Backtest(data_path)

    # Import data

    # Set up the logger

    # Initialize the Backtest instance

    # Run the backtest

    # Save the relevant data from the Backtest instance

# create the summary
