"""
Mass Backtester
https://github.com/rulibar/mass-backtester

Gets data files from data_dir with the following format:
btc_eth_120m_200101-200301.txt
[
    1573502400000,      // Open time
    '0.02128900',       // Open
    '0.02130100',       // High
    '0.02126800',       // Low
    '0.02130000',       // Close
    '3221.45600000',    // Volume
    1573509599999,      // Close time
    '68.56577333',      // Quote asset volume
    5295,               // Number of trades
    '1564.35900000',    // Taker buy base asset volume
    '33.29836240',      // Taker buy quote asset volume
    '0'                 // Ignore
]
Generated by get_data.py.
n_early_candles will be skipped from the beginning and only used to calculate indicators.
The first entry in the data is the oldest.
Backtests the strategy on each dataset and creates a summary of the results.
"""

import os
import time
import logging

# user vars
n_early_candles = 600
data_dir = "data/"
start_pos = [0, 1] # [asset, base]

# set up logger
def set_log_file(ts, dsname):
    # Set up the log folders
    gmt = time.gmtime(ts / 1000)
    asct = time.asctime(gmt)
    yy = str(gmt.tm_year)[2:]; mm = str(gmt.tm_mon); dd = str(gmt.tm_mday)
    if len(mm) == 1: mm = "0" + mm
    if len(dd) == 1: dd = "0" + dd
    path = "./logs/"
    if not os.path.isdir(path): os.mkdir(path)
    path += "{}/".format(dsname)
    if not os.path.isdir(path): os.mkdir(path)
    path += "{}/".format(yy + mm)
    if not os.path.isdir(path): os.mkdir(path)
    # Set the log destination and format
    fileh = logging.FileHandler("./logs/{}/{}/{}.log".format(dsname, yy + mm, yy + mm + dd), "a")
    formatter = logging.Formatter("%(levelname)s {} - %(message)s".format(asct))
    fileh.setFormatter(formatter)
    logger.handlers = [fileh]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger()

# set up backtester
def fix_dec(float_in):
    float_out = "{:.8f}".format(float_in)
    while float_out[-1] == "0": float_out = float_out[:-1]
    if float_out[-1] == ".": float_out = float_out[:-1]
    return float_out

def shrink_list(list_in, size) -> list:
    if len(list_in) > size: return list_in[-size:]
    return list_in

class Portfolio:
    def __init__(self, candle, positions, funds):
        self.ts = candle['ts_end']
        self.asset = positions['asset'][1]
        self.base = positions['base'][1]
        self.price = candle['close']
        self.positionValue = self.price * self.asset
        self.size = self.base + self.positionValue
        self.funds = funds
        if funds > self.size or funds == 0: self.funds = float(self.size)
        self.sizeT = float(self.funds)
        self.rin = self.price * self.asset / self.size
        self.rinT = self.price * self.asset / self.sizeT

class Backtest:
    def __init__(self, dspath):
        # Expected dspath format: './data/btc_xrp_120m_200101-200301.txt'
        self.dspath = dspath
        self.dsname = dspath.split('/')
        self.dsname = self.dsname[-1][:-4]
        self.dsname_data = self.dsname.split('_')
        with open(self.dspath) as data: self.data = data.read()
        self.data = self.data.split('\n')[:-1]
        self.data = [eval(dat) for dat in self.data]

        self.next_log = 0
        self.ticks = 0; self.days = 0; self.trades = 0
        self.exchange = "binance"
        self.base = self.dsname_data[0].upper()
        self.asset = self.dsname_data[1].upper()
        self.pair = self.asset + self.base
        self.interval = int(self.dsname_data[2][:-1])
        set_log_file(self.data[n_early_candles][0], self.dsname)
        logger.info("New trader instance started on {} {}m.".format(self.pair, self.interval))
        self.get_params()

        self.candles = [self.get_candle(dat) for dat in self.data]

        # dws

        self.candle_start = None
        self.positions_start = None
        #self.positions_init_ts = 0
        self.positions = {"asset": [self.asset, float(start_pos[0])], "base": [self.base, float(start_pos[1])]}
        self.positions_f = {'asset': list(self.positions['asset'])}
        self.positions_f['base'] = list(self.positions['base'])
        self.positions_t = {'asset': list(self.positions['asset'])}
        self.positions_t['base'] = list(self.positions['base'])
        p = Portfolio(self.candles[n_early_candles], self.positions, float(self.params['funds']))
        # Note self.candles[n_early_candles] is the 601th candle

    def get_candle(self, data):
        # data is a kline list from Binance
        candle = {
            "ts_start": int(data[0]),
            "open": round(float(data[1]), 8),
            "high": round(float(data[2]), 8),
            "low": round(float(data[3]), 8),
            "close": round(float(data[4]), 8),
            "volume": round(float(data[5]), 8),
            "ts_end": int(data[6])}
        return candle

    def get_params(self):
        # import and process params
        params = dict()
        with open("config.txt") as cfg:
            par = [l.split()[0] for l in cfg.read().split("\n")[2:-1]]
            for p in par:
                p = p.split("=")
                if len(p) != 2: continue
                params[str(p[0])] = str(p[1])

        # check values
        funds = float(params['funds'])
        if funds < 0:
            logger.warning("Warning! Maximum amount to invest should be zero or greater.")
            params['funds'] = "0"

        logs_per_day = float(params['logs_per_day'])
        if logs_per_day < 0:
            logger.warning("Warning! Logs per day should be zero or greater.")
            params['logs_per_day'] = "1"

        log_dws = str(params['log_dws'])
        if log_dws not in {"yes", "no"}:
            logger.warning("Warning! Log deposits and withdrawals set to 'yes'.")
            params['log_dws'] = "yes"

        # check for additions and removals
        if self.ticks == 0: self.params = dict()

        keys_old = {key for key in self.params}
        keys_new = {key for key in params}

        keys_added = {key for key in keys_new if key not in keys_old}
        keys_removed = {key for key in keys_old if key not in keys_new}

        if len(keys_added) > 0:
            logger.info("{} parameter(s) added.".format(len(keys_added)))
            for key in keys_added: logger.info("    \"{}\": {}".format(key, params[key]))
        if len(keys_removed) > 0:
            logger.info("{} parameter(s) removed.".format(len(keys_removed)))
            for key in keys_removed: logger.info("    \"{}\"".format(key))

        # check for changes
        keys_remaining = {key for key in keys_old if key in keys_new}
        keys_changed = set()

        for key in keys_remaining:
            if params[key] != self.params[key]: keys_changed.add(key)

        if self.ticks == 0:
            keys_changed.add('funds'); keys_changed.add('logs_per_day'); keys_changed.add('log_dws')

        if "funds" in keys_changed:
            if params['funds'] == "0": logger.info("No maximum investment amount specified.")
            else: logger.info("Maximum investment amount set to {} {}.".format(params['funds'], self.base))
            self.params['funds'] = params['funds']
            keys_changed.remove('funds')
        if "logs_per_day" in keys_changed:
            if params['logs_per_day'] == "0": logger.info("Log updates turned off.")
            elif params['logs_per_day'] == "1": logger.info("Logs updating once per day.")
            else: logger.info("Logs updating {} times per day".format(params['logs_per_day']))
            self.params['logs_per_day'] = params['logs_per_day']
            keys_changed.remove('logs_per_day')
        if "log_dws" in keys_changed:
            if params['log_dws'] == "yes": logger.info("Deposit and withdrawal logs enabled.")
            else: logger.info("Deposit and withdrawal logs disabled.")
            self.params['log_dws'] = params['log_dws']
            keys_changed.remove('log_dws')

        if len(keys_changed) > 0:
            logger.info("{} parameter(s) changed.".format(len(keys_changed)))
            for key in keys_changed:
                logger.info("    \"{}\": {} -> {}".format(key, self.params[key], params[key]))
                self.params[key] = params[key]

    def get_positions(self):
        positions = {"asset": [self.asset, 0], "base": [self.base, 0]}

        return positions

# main code
datasets = os.listdir(data_dir)

# cycle through the data
for dataset in datasets:
    """
    - Import the data
    - Set up the logger
    - Initialize the Backtest instance
    - Run the backtest
    - Save the relevant data from the Backtest instance
    """
    data_path = "./" + data_dir + dataset
    backtest = Backtest(data_path)

    # Import data

    # Set up the logger

    # Initialize the Backtest instance

    # Run the backtest

    # Save the relevant data from the Backtest instance

# create the summary
